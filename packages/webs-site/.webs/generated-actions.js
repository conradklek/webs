// This file is auto-generated by the Webs build process.
// Do not edit this file directly.


export async function upsertTodos({ db, user }, record) {
  if (!user || !user.id) {
    throw new Error('Authentication error: User ID not available.');
  }
  const stmt = db.prepare(`INSERT INTO todos (id, user_id, content, completed, created_at, updated_at) VALUES (?, ?, ?, ?, ?, ?) ON CONFLICT(id) DO UPDATE SET id = excluded.id, user_id = excluded.user_id, content = excluded.content, completed = excluded.completed, created_at = excluded.created_at, updated_at = excluded.updated_at;`);
  stmt.run(record.id, record.user_id, record.content, record.completed, record.created_at, record.updated_at);
  return { broadcast: { tableName: 'todos', type: 'put', data: record } };
}

export async function deleteTodos({ db, user }, id) {
  const stmt = db.prepare(`DELETE FROM todos WHERE id = ? AND user_id = ?;`);
  stmt.run(id, user.id);
  return { broadcast: { tableName: 'todos', type: 'delete', id } };
}


export async function upsertChat_messages({ db, user }, record) {
  if (!user || !user.id) {
    throw new Error('Authentication error: User ID not available.');
  }
  const stmt = db.prepare(`INSERT INTO chat_messages (id, channel, username, message, user_id, created_at) VALUES (?, ?, ?, ?, ?, ?) ON CONFLICT(id) DO UPDATE SET id = excluded.id, channel = excluded.channel, username = excluded.username, message = excluded.message, user_id = excluded.user_id, created_at = excluded.created_at;`);
  stmt.run(record.id, record.channel, record.username, record.message, record.user_id, record.created_at);
  return { broadcast: { tableName: 'chat_messages', type: 'put', data: record } };
}

export async function deleteChat_messages({ db, user }, id) {
  const stmt = db.prepare(`DELETE FROM chat_messages WHERE id = ? AND user_id = ?;`);
  stmt.run(id, user.id);
  return { broadcast: { tableName: 'chat_messages', type: 'delete', id } };
}
