<script type="module">
  export const motions = {
    left: (pos) => Math.max(0, pos - 1),
    right: (pos, text) => Math.min(text.length, pos + 1),
    lineStart: (pos, text) => text.lastIndexOf('\n', pos - 1) + 1,
    lineEnd: (pos, text) => {
      const nextNewline = text.indexOf('\n', pos);
      return nextNewline === -1 ? text.length : nextNewline;
    },
    up: (pos, text, { targetColumn }) => {
      const currentLineStart = motions.lineStart(pos, text);
      if (currentLineStart === 0) return pos;
      const prevLineEnd = currentLineStart - 1;
      const prevLineStart = motions.lineStart(prevLineEnd, text);
      return Math.min(prevLineStart + targetColumn, prevLineEnd);
    },
    down: (pos, text, { targetColumn }) => {
      const currentLineEnd = motions.lineEnd(pos, text);
      if (currentLineEnd >= text.length) return pos;
      const nextLineStart = currentLineEnd + 1;
      const nextLineEnd = motions.lineEnd(nextLineStart, text);
      return Math.min(nextLineStart + targetColumn, nextLineEnd);
    },
    nextWord: (pos, text) => {
      let i = pos;
      const isWordChar = (c) => /\w/.test(c);
      while (i < text.length && /\s/.test(text[i])) i++;
      if (isWordChar(text[i])) {
        while (i < text.length && isWordChar(text[i])) i++;
      } else {
        while (i < text.length && !isWordChar(text[i]) && !/\s/.test(text[i]))
          i++;
      }
      while (i < text.length && /\s/.test(text[i])) i++;
      return i;
    },
    prevWord: (pos, text) => {
      if (pos === 0) return 0;
      let i = pos - 1;
      while (i > 0 && /\s/.test(text[i])) i--;
      const isWordChar = (c) => /\w/.test(c);
      if (isWordChar(text[i])) {
        while (i > 0 && isWordChar(text[i - 1])) i--;
      } else {
        while (i > 0 && !isWordChar(text[i - 1]) && !/\s/.test(text[i - 1]))
          i--;
      }
      return i;
    },
    wordEnd: (pos, text) => {
      let i = pos;
      if (i >= text.length - 1) return pos;
      i++;
      while (i < text.length && /\s/.test(text[i])) i++;
      const isWordChar = (c) => /\w/.test(c);
      if (isWordChar(text[i])) {
        while (i < text.length - 1 && isWordChar(text[i + 1])) i++;
      } else {
        while (
          i < text.length - 1 &&
          !isWordChar(text[i + 1]) &&
          !/\s/.test(text[i + 1])
        )
          i++;
      }
      return i;
    },
    documentStart: () => 0,
    documentEnd: (_, text) => text.length,
  };
</script>
