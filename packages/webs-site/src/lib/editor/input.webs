<script type="module">
  function getKeyString(event) {
    let key = event.key;
    if (key === 'Control' || key === 'Shift' || key === 'Alt' || key === 'Meta')
      return null;

    if (event.ctrlKey) key = `Control+${key}`;
    if (event.altKey) key = `Alt+${key}`;
    if (event.metaKey) key = `Meta+${key}`;

    if (key.length > 1 && key.startsWith('Arrow')) {
      key = key.replace('Arrow', '').toLowerCase();
    }

    return key;
  }

  function handleInputModeKeys(editor, event) {
    const { mode } = editor.state;
    const { key } = event;

    if (key === 'Escape' || (event.ctrlKey && key === 'c')) {
      event.preventDefault();
      editor.actions.enterNormalMode();
      return;
    }

    if (mode === 'INSERT') {
      if (key.length === 1 && !event.ctrlKey && !event.metaKey) {
        event.preventDefault();
        editor.actions.insertText(key);
      } else if (key === 'Enter') {
        event.preventDefault();
        editor.actions.insertText('\n');
      } else if (key === 'Backspace') {
        event.preventDefault();
        editor.actions.deleteCharBackwards();
      }
    } else if (mode === 'COMMAND_LINE') {
      event.preventDefault();
      if (key === 'Enter') {
        editor.actions.executeCommand();
      } else if (key === 'Backspace') {
        editor.setState((state) => ({
          commandLine: {
            ...state.commandLine,
            input: state.commandLine.input.slice(0, -1),
          },
        }));
      } else if (key.length === 1 && !event.ctrlKey && !event.metaKey) {
        editor.setState((state) => ({
          commandLine: {
            ...state.commandLine,
            input: state.commandLine.input + key,
          },
        }));
      }
    }
  }

  export function processKeyEvent(editor, event) {
    const { mode } = editor.state;
    if (['INSERT', 'COMMAND_LINE'].includes(mode)) {
      handleInputModeKeys(editor, event);
      return;
    }

    event.preventDefault();
    const key = getKeyString(event);
    if (!key) return;

    const keymap = editor.keymaps[mode];
    if (!keymap) return;

    if (
      (key >= '1' && key <= '9') ||
      (key === '0' && editor.state.motionCount > 0)
    ) {
      const newCount = (editor.state.motionCount || 0) * 10 + parseInt(key, 10);
      editor.setState({ motionCount: newCount });
      return;
    }

    const command = keymap[key];
    if (command) {
      command(editor);
      editor.setState({ motionCount: 0 });
    } else {
      editor.setState({ motionCount: 0 });
    }
  }
</script>
