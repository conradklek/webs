<script type="module">
  import { UndoRedoHistory } from './history.webs';
  import { CommandRegistry } from './commands.webs';
  import { processKeyEvent } from './input.webs';
  import { createKeymaps } from './keymaps.webs';
  import { actions } from './actions.webs';

  function createInitialState(initialValue, language = 'js') {
    return {
      mode: 'NORMAL',
      text: initialValue,
      selection: { start: 0, end: 0, anchor: 0 },
      targetColumn: 0,
      commandLine: { prefix: '', input: '' },
      keyBuffer: '',
      motionCount: 0,
      language,
      isDirty: false,
      statusMessage: '',
    };
  }

  export class Editor {
    constructor(initialValue, callback, { fs, filePath, language }) {
      this.callback = callback;
      this.fs = fs;
      this.filePath = filePath;
      this.fileName = filePath ? filePath.split('/').pop() : '[Untitled]';
      this.state = createInitialState(initialValue, language);

      this.actions = {};
      for (const key in actions) {
        this.actions[key] = actions[key].bind(null, this);
      }

      this.history = new UndoRedoHistory(initialValue);
      this.keymaps = createKeymaps();
      this.commandRegistry = new CommandRegistry(this, fs, filePath);
      this.setMode('NORMAL');
    }

    setState(updater) {
      const oldState = { ...this.state };
      const newState =
        typeof updater === 'function' ? updater(oldState) : updater;
      this.state = { ...oldState, ...newState };
      this.callback(this.state);
    }

    processKeyEvent(event) {
      processKeyEvent(this, event);
    }

    setMode(newMode, options = {}) {
      this.setState((state) => ({
        mode: newMode,
        selection: options.selection || state.selection,
        commandLine: { prefix: '', input: '' },
        keyBuffer: '',
        motionCount: 0,
        ...options.state,
      }));
    }

    reset(initialValue = '', { filePath }) {
      this.language = filePath && filePath.endsWith('.js') ? 'js' : 'plaintext';
      this.state = createInitialState(initialValue, this.language);
      this.history.clear();
      this.history.record(this.state.text, { immediate: true });
      this.fileName = filePath ? filePath.split('/').pop() : '[Untitled]';
      this.filePath = filePath;
      this.state.isDirty = false;
      this.commandRegistry = new CommandRegistry(this, this.fs, this.filePath);
      this.callback(this.state);
    }
  }
</script>
