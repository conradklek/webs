<script>
  import { fs, state, onMounted, watch, computed } from '@conradklek/webs';
  import { Editor } from '../lib/editor/editor.webs';

  export default {
    props: {
      filePath: String,
      initialContent: String,
    },
    setup(props) {
      const editorState = state({});
      const editorRef = state(null);
      let editorInstance = null;

      const getLineCol = (text, pos) => {
        if (typeof text !== 'string') return { row: 1, col: 1 };
        const textBefore = text.substring(0, pos);
        const row = (textBefore.match(/\n/g) || []).length;
        const lineStartPos = text.lastIndexOf('\n', textBefore.length - 1) + 1;
        const col = pos - lineStartPos;
        return { row: row + 1, col: col + 1 };
      };

      const cursorPosition = computed(() => {
        if (!editorState.value?.text || editorState.value.selection == null)
          return '1:1';
        const { text, selection } = editorState.value;
        const { row, col } = getLineCol(text, selection.end);
        return `${row}:${col}`;
      });

      onMounted(() => {
        editorInstance = new Editor(
          props.initialContent || '',
          (newState) => {
            editorState.value = { ...newState };
          },
          { fs, filePath: props.filePath },
        );
        editorState.value = editorInstance.state;
        if (editorRef.value) editorRef.value.focus();
      });

      watch(
        () => editorState.value?.selection,
        (selection) => {
          const el = editorRef.value;
          if (
            el &&
            selection &&
            (el.selectionStart !== selection.start ||
              el.selectionEnd !== selection.end)
          ) {
            el.selectionStart = selection.start;
            el.selectionEnd = selection.end;
          }
        },
        { deep: true },
      );

      watch(
        () => props.filePath,
        (newPath) => {
          if (editorInstance) {
            editorInstance.reset(editorState.value.text, { filePath: newPath });
          }
        },
      );

      function handleKeyDown(event) {
        if (!editorInstance) return;
        editorInstance.processKeyEvent(event);
      }

      function handleTextAreaInput(event) {
        if (editorState.value.mode !== 'INSERT') {
          event.target.value = editorState.value.text;
        }
      }

      function save() {
        if (editorInstance) editorInstance.commandRegistry.execute('w');
      }
      function undo() {
        if (editorInstance) editorInstance.actions.undo();
      }
      function redo() {
        if (editorInstance) editorInstance.actions.redo();
      }

      return {
        editorRef,
        editorState,
        handleKeyDown,
        handleTextAreaInput,
        cursorPosition,
        getLineCol,
        save,
        undo,
        redo,
      };
    },
  };
</script>

<template>
  <div class="w-full flex flex-col h-full font-mono">
    <textarea
      @ref="editorRef"
      :value="editorState.text"
      @keydown="handleKeyDown"
      @input="handleTextAreaInput"
      class="absolute inset-0 w-full h-full p-4 resize-none focus:outline-none leading-normal"
      spellcheck="false"
      autocorrect="off"
      autocapitalize="off"
    ></textarea>
  </div>
</template>
