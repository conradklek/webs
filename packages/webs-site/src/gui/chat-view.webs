<script>
  import {
    action,
    state,
    onMounted,
    onUnmounted,
    watch,
  } from '@conradklek/webs';

  export default {
    name: 'chat-view',
    props: {
      channel: { type: String, required: true },
    },
    setup(props) {
      const messages = state([]);
      const currentMessage = state('');
      const socket = state(null);
      const connectionStatus = state('connecting');

      const fetchHistoryAction = action('fetch_history');

      let socketInstance = null;
      let reconnectTimeout = null;

      function connect() {
        if (socketInstance || !props.channel) return;

        connectionStatus.value = 'connecting';
        const protocol = window.location.protocol === 'https:' ? 'wss:' : 'ws:';
        const wsUrl = `${protocol}//${window.location.host}/ws/chat?channel=${props.channel}`;

        socketInstance = new WebSocket(wsUrl);
        socket.value = socketInstance;

        socketInstance.onopen = () => {
          connectionStatus.value = 'connected';
          clearTimeout(reconnectTimeout);
        };

        socketInstance.onmessage = (event) => {
          const data = JSON.parse(event.data);
          messages.push(data);
        };

        socketInstance.onclose = () => {
          connectionStatus.value = 'disconnected';
          socketInstance = null;
          socket.value = null;
          reconnectTimeout = setTimeout(connect, 3000);
        };

        socketInstance.onerror = (error) => {
          console.error('[Chat] WebSocket Error:', error);
        };
      }

      function handleSend() {
        const msg = currentMessage.value.trim();
        if (msg && socket.value?.readyState === WebSocket.OPEN) {
          socket.value.send(msg);
          currentMessage.value = '';
        }
      }

      onMounted(async () => {
        const history = await fetchHistoryAction.call({
          channel: props.channel,
        });
        if (history) {
          messages.push(...history.reverse());
        }
        connect();
      });

      onUnmounted(() => {
        clearTimeout(reconnectTimeout);
        socket.value?.close();
      });

      watch(
        () => messages.length,
        () => {
          setTimeout(() => {
            const list = document.querySelector('.message-list');
            if (list) list.scrollTop = list.scrollHeight;
          }, 0);
        },
      );

      return { messages, currentMessage, handleSend, connectionStatus };
    },
  };
</script>

<template>
  <div class="chat-container">
    <div class="message-list">
      <div w-for="msg in messages" class="message-item">
        <div
          w-if="msg.type === 'join'"
          class="text-sm italic text-green-600 py-1 px-2"
        >
          &rarr; {{ msg.user }} has joined the channel.
        </div>
        <div
          w-if="msg.type === 'part'"
          class="text-sm italic text-red-600 py-1 px-2"
        >
          &larr; {{ msg.user }} has left the channel.
        </div>
        <div w-if="msg.type === 'message'" class="py-1 px-2 flex">
          <span class="font-bold mr-2 text-left flex-shrink-0"
            >&lt;{{ msg.from }}&gt;</span
          >
          <span class="break-words min-w-0">{{ msg.text }}</span>
        </div>
      </div>
    </div>
    <div class="chat-input-area">
      <div
        class="status-indicator"
        :class="{
          'bg-green-500': connectionStatus === 'connected',
          'bg-yellow-500': connectionStatus === 'connecting',
          'bg-red-500': connectionStatus === 'disconnected'
        }"
        :title="'Status: ' + connectionStatus"
      ></div>
      <form @submit.prevent="handleSend" class="w-full">
        <input
          type="text"
          bind:value="currentMessage"
          placeholder="Type a message..."
          class="chat-input"
          :disabled="connectionStatus !== 'connected'"
        />
      </form>
    </div>
  </div>
</template>

<style>
  .chat-container {
    @apply text-sm font-mono border border-border h-full flex flex-col;
  }
  .message-list {
    @apply flex-grow p-2 overflow-y-auto;
  }
  .chat-input-area {
    @apply border-t border-border flex items-center;
  }
  .status-indicator {
    @apply w-2.5 h-2.5 rounded-full mx-3 flex-shrink-0 transition-colors;
  }
  .chat-input {
    @apply w-full p-2 focus:outline-none text-sm font-mono;
  }
</style>
