<script>
  import {
    computed,
    state,
    fs,
    onPropsReceived,
    onMounted,
  } from '@conradklek/webs';

  export default {
    actions: {
      async prefetch({ fs, params, user }) {
        if (!user) {
          return { error: 'You must be logged in to view files.' };
        }
        try {
          const path = params.path || '';
          console.log(
            `[Prefetch] Listing files for path: "${path}" on server.`,
          );
          const items = await fs.ls(path, {
            access: 'private',
          });
          console.log(`[Prefetch] Found ${items?.length || 0} items.`);
          return { items: items || [] };
        } catch (error) {
          console.error('[Prefetch Error]', error);
          return { error: 'Could not load directory contents.' };
        }
      },
    },
    props: {
      initialState: Object,
      params: Object,
    },

    setup(props) {
      console.log('[FS Component] Setup called with props:', {
        initialState: JSON.parse(JSON.stringify(props.initialState || {})),
        params: JSON.parse(JSON.stringify(props.params || {})),
      });

      const currentPath = state(props.params.path || '');

      const itemsController = fs(() => currentPath.value).use(
        props.initialState?.items || [],
      );

      onMounted(() => {
        console.log(
          '[FS Component] Mounted. Current items data:',
          JSON.parse(JSON.stringify(itemsController.data)),
        );
      });

      onPropsReceived((newProps) => {
        console.log(
          '[FS Component] onPropsReceived hook triggered with new props:',
          {
            newInitialState: JSON.parse(
              JSON.stringify(newProps.initialState || {}),
            ),
            newParams: JSON.parse(JSON.stringify(newProps.params || {})),
          },
        );

        currentPath.value = newProps.params.path || '';

        if (newProps.initialState && newProps.initialState.items) {
          itemsController.data = newProps.initialState.items;
        }
      });

      const parentDirectoryLink = computed(() => {
        const path = (currentPath.value || '').replace(/\/$/, '');
        if (!path) return null;
        const segments = path.split('/');
        segments.pop();
        const parentPath = segments.join('/');
        return parentPath
          ? `/${props.params.username}/fs/${parentPath}`
          : `/${props.params.username}/fs`;
      });

      const sortedItems = computed(() => {
        const data = itemsController.data || [];
        return [...data].sort((a, b) => {
          if (a.isDirectory && !b.isDirectory) return -1;
          if (!a.isDirectory && b.isDirectory) return 1;
          return a.name.localeCompare(b.name);
        });
      });

      function getDirectoryLink(item) {
        return `/${props.params.username}/fs/${item.path}`;
      }

      return {
        items: itemsController,
        sortedItems,
        params: props.params,
        parentDirectoryLink,
        getDirectoryLink,
      };
    },
  };
</script>

<template>
  <div class="flex flex-col gap-4">
    {#if items.error}
    <div class="p-4 bg-red-100 text-red-700 rounded-lg">
      <strong>Error:</strong> {{ items.error }}
    </div>
    {:else}
    <div class="mt-4">
      <ul class="space-y-2 font-mono">
        {#if parentDirectoryLink}
        <li>
          <a :href="parentDirectoryLink" class="link">../</a>
        </li>
        {/if} {#if sortedItems && sortedItems.length > 0} {#each sortedItems as
        item (item.path)}
        <li class="flex justify-between items-center group">
          <div class="flex-1">
            {#if item.isDirectory}
            <a :href="getDirectoryLink(item)" class="link">{{ item.name }}/</a>
            {:else}
            <a
              :href="'/' + params.username + '/editor/' + item.path"
              class="link"
              >{{ item.name }}</a
            >
            {/if}
          </div>
        </li>
        {/each} {:else if !items?.isLoading}
        <li class="text-muted-foreground">This directory is empty.</li>
        {/if}
      </ul>
    </div>
    {/if}
  </div>
</template>
